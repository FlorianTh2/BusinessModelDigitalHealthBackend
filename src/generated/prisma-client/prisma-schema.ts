// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Actor {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ActorConnection {
  pageInfo: PageInfo!
  edges: [ActorEdge]!
  aggregate: AggregateActor!
}

input ActorCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutActor_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input ActorCreateManyWithoutTable_idsInput {
  create: [ActorCreateWithoutTable_idsInput!]
  connect: [ActorWhereUniqueInput!]
}

input ActorCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type ActorEdge {
  node: Actor!
  cursor: String!
}

enum ActorOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ActorPreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ActorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ActorScalarWhereInput!]
  OR: [ActorScalarWhereInput!]
  NOT: [ActorScalarWhereInput!]
}

type ActorSubscriptionPayload {
  mutation: MutationType!
  node: Actor
  updatedFields: [String!]
  previousValues: ActorPreviousValues
}

input ActorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActorWhereInput
  AND: [ActorSubscriptionWhereInput!]
  OR: [ActorSubscriptionWhereInput!]
  NOT: [ActorSubscriptionWhereInput!]
}

input ActorUpdateInput {
  table_ids: TableUpdateManyWithoutActor_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ActorUpdateManyDataInput {
  text: String
  note: String
}

input ActorUpdateManyMutationInput {
  text: String
  note: String
}

input ActorUpdateManyWithoutTable_idsInput {
  create: [ActorCreateWithoutTable_idsInput!]
  delete: [ActorWhereUniqueInput!]
  connect: [ActorWhereUniqueInput!]
  set: [ActorWhereUniqueInput!]
  disconnect: [ActorWhereUniqueInput!]
  update: [ActorUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [ActorUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [ActorScalarWhereInput!]
  updateMany: [ActorUpdateManyWithWhereNestedInput!]
}

input ActorUpdateManyWithWhereNestedInput {
  where: ActorScalarWhereInput!
  data: ActorUpdateManyDataInput!
}

input ActorUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ActorUpdateWithWhereUniqueWithoutTable_idsInput {
  where: ActorWhereUniqueInput!
  data: ActorUpdateWithoutTable_idsDataInput!
}

input ActorUpsertWithWhereUniqueWithoutTable_idsInput {
  where: ActorWhereUniqueInput!
  update: ActorUpdateWithoutTable_idsDataInput!
  create: ActorCreateWithoutTable_idsInput!
}

input ActorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ActorWhereInput!]
  OR: [ActorWhereInput!]
  NOT: [ActorWhereInput!]
}

input ActorWhereUniqueInput {
  id: ID
}

type AggregateActor {
  count: Int!
}

type AggregateCanvas {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateExpense {
  count: Int!
}

type AggregateNetworkEffect {
  count: Int!
}

type AggregatePattern {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateRegulatory {
  count: Int!
}

type AggregateRevenue {
  count: Int!
}

type AggregateStrategy {
  count: Int!
}

type AggregateStrategyPattern {
  count: Int!
}

type AggregateTable {
  count: Int!
}

type AggregateTechnicalInfrastracture {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateValueCreation {
  count: Int!
}

type AggregateValueDelivery {
  count: Int!
}

type AggregateValueProposition {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Canvas {
  id: ID!
  project_id: Project!
  strategy_id: Strategy
  pattern_ids(where: PatternWhereInput, orderBy: PatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pattern!]
  table_id: Table!
  name: String!
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CanvasConnection {
  pageInfo: PageInfo!
  edges: [CanvasEdge]!
  aggregate: AggregateCanvas!
}

input CanvasCreateInput {
  id: ID
  project_id: ProjectCreateOneWithoutCanvas_idsInput!
  strategy_id: StrategyCreateOneWithoutCanvas_idsInput
  pattern_ids: PatternCreateManyWithoutCanvas_idsInput
  table_id: TableCreateOneInput!
  name: String!
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input CanvasCreateManyWithoutPattern_idsInput {
  create: [CanvasCreateWithoutPattern_idsInput!]
  connect: [CanvasWhereUniqueInput!]
}

input CanvasCreateManyWithoutProject_idInput {
  create: [CanvasCreateWithoutProject_idInput!]
  connect: [CanvasWhereUniqueInput!]
}

input CanvasCreateManyWithoutStrategy_idInput {
  create: [CanvasCreateWithoutStrategy_idInput!]
  connect: [CanvasWhereUniqueInput!]
}

input CanvasCreateWithoutPattern_idsInput {
  id: ID
  project_id: ProjectCreateOneWithoutCanvas_idsInput!
  strategy_id: StrategyCreateOneWithoutCanvas_idsInput
  table_id: TableCreateOneInput!
  name: String!
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input CanvasCreateWithoutProject_idInput {
  id: ID
  strategy_id: StrategyCreateOneWithoutCanvas_idsInput
  pattern_ids: PatternCreateManyWithoutCanvas_idsInput
  table_id: TableCreateOneInput!
  name: String!
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input CanvasCreateWithoutStrategy_idInput {
  id: ID
  project_id: ProjectCreateOneWithoutCanvas_idsInput!
  pattern_ids: PatternCreateManyWithoutCanvas_idsInput
  table_id: TableCreateOneInput!
  name: String!
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type CanvasEdge {
  node: Canvas!
  cursor: String!
}

enum CanvasOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CanvasPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CanvasScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CanvasScalarWhereInput!]
  OR: [CanvasScalarWhereInput!]
  NOT: [CanvasScalarWhereInput!]
}

type CanvasSubscriptionPayload {
  mutation: MutationType!
  node: Canvas
  updatedFields: [String!]
  previousValues: CanvasPreviousValues
}

input CanvasSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CanvasWhereInput
  AND: [CanvasSubscriptionWhereInput!]
  OR: [CanvasSubscriptionWhereInput!]
  NOT: [CanvasSubscriptionWhereInput!]
}

input CanvasUpdateInput {
  project_id: ProjectUpdateOneRequiredWithoutCanvas_idsInput
  strategy_id: StrategyUpdateOneWithoutCanvas_idsInput
  pattern_ids: PatternUpdateManyWithoutCanvas_idsInput
  table_id: TableUpdateOneRequiredInput
  name: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input CanvasUpdateManyDataInput {
  name: String
}

input CanvasUpdateManyMutationInput {
  name: String
}

input CanvasUpdateManyWithoutPattern_idsInput {
  create: [CanvasCreateWithoutPattern_idsInput!]
  delete: [CanvasWhereUniqueInput!]
  connect: [CanvasWhereUniqueInput!]
  set: [CanvasWhereUniqueInput!]
  disconnect: [CanvasWhereUniqueInput!]
  update: [CanvasUpdateWithWhereUniqueWithoutPattern_idsInput!]
  upsert: [CanvasUpsertWithWhereUniqueWithoutPattern_idsInput!]
  deleteMany: [CanvasScalarWhereInput!]
  updateMany: [CanvasUpdateManyWithWhereNestedInput!]
}

input CanvasUpdateManyWithoutProject_idInput {
  create: [CanvasCreateWithoutProject_idInput!]
  delete: [CanvasWhereUniqueInput!]
  connect: [CanvasWhereUniqueInput!]
  set: [CanvasWhereUniqueInput!]
  disconnect: [CanvasWhereUniqueInput!]
  update: [CanvasUpdateWithWhereUniqueWithoutProject_idInput!]
  upsert: [CanvasUpsertWithWhereUniqueWithoutProject_idInput!]
  deleteMany: [CanvasScalarWhereInput!]
  updateMany: [CanvasUpdateManyWithWhereNestedInput!]
}

input CanvasUpdateManyWithoutStrategy_idInput {
  create: [CanvasCreateWithoutStrategy_idInput!]
  delete: [CanvasWhereUniqueInput!]
  connect: [CanvasWhereUniqueInput!]
  set: [CanvasWhereUniqueInput!]
  disconnect: [CanvasWhereUniqueInput!]
  update: [CanvasUpdateWithWhereUniqueWithoutStrategy_idInput!]
  upsert: [CanvasUpsertWithWhereUniqueWithoutStrategy_idInput!]
  deleteMany: [CanvasScalarWhereInput!]
  updateMany: [CanvasUpdateManyWithWhereNestedInput!]
}

input CanvasUpdateManyWithWhereNestedInput {
  where: CanvasScalarWhereInput!
  data: CanvasUpdateManyDataInput!
}

input CanvasUpdateWithoutPattern_idsDataInput {
  project_id: ProjectUpdateOneRequiredWithoutCanvas_idsInput
  strategy_id: StrategyUpdateOneWithoutCanvas_idsInput
  table_id: TableUpdateOneRequiredInput
  name: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input CanvasUpdateWithoutProject_idDataInput {
  strategy_id: StrategyUpdateOneWithoutCanvas_idsInput
  pattern_ids: PatternUpdateManyWithoutCanvas_idsInput
  table_id: TableUpdateOneRequiredInput
  name: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input CanvasUpdateWithoutStrategy_idDataInput {
  project_id: ProjectUpdateOneRequiredWithoutCanvas_idsInput
  pattern_ids: PatternUpdateManyWithoutCanvas_idsInput
  table_id: TableUpdateOneRequiredInput
  name: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input CanvasUpdateWithWhereUniqueWithoutPattern_idsInput {
  where: CanvasWhereUniqueInput!
  data: CanvasUpdateWithoutPattern_idsDataInput!
}

input CanvasUpdateWithWhereUniqueWithoutProject_idInput {
  where: CanvasWhereUniqueInput!
  data: CanvasUpdateWithoutProject_idDataInput!
}

input CanvasUpdateWithWhereUniqueWithoutStrategy_idInput {
  where: CanvasWhereUniqueInput!
  data: CanvasUpdateWithoutStrategy_idDataInput!
}

input CanvasUpsertWithWhereUniqueWithoutPattern_idsInput {
  where: CanvasWhereUniqueInput!
  update: CanvasUpdateWithoutPattern_idsDataInput!
  create: CanvasCreateWithoutPattern_idsInput!
}

input CanvasUpsertWithWhereUniqueWithoutProject_idInput {
  where: CanvasWhereUniqueInput!
  update: CanvasUpdateWithoutProject_idDataInput!
  create: CanvasCreateWithoutProject_idInput!
}

input CanvasUpsertWithWhereUniqueWithoutStrategy_idInput {
  where: CanvasWhereUniqueInput!
  update: CanvasUpdateWithoutStrategy_idDataInput!
  create: CanvasCreateWithoutStrategy_idInput!
}

input CanvasWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  project_id: ProjectWhereInput
  strategy_id: StrategyWhereInput
  pattern_ids_every: PatternWhereInput
  pattern_ids_some: PatternWhereInput
  pattern_ids_none: PatternWhereInput
  table_id: TableWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CanvasWhereInput!]
  OR: [CanvasWhereInput!]
  NOT: [CanvasWhereInput!]
}

input CanvasWhereUniqueInput {
  id: ID
}

type Company {
  id: ID!
  pattern_ids(where: PatternWhereInput, orderBy: PatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pattern!]
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  pattern_ids: PatternCreateManyWithoutCompany_idsInput
  name: String!
  description: String
}

input CompanyCreateManyWithoutPattern_idsInput {
  create: [CompanyCreateWithoutPattern_idsInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutPattern_idsInput {
  id: ID
  name: String!
  description: String
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CompanyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  pattern_ids: PatternUpdateManyWithoutCompany_idsInput
  name: String
  description: String
}

input CompanyUpdateManyDataInput {
  name: String
  description: String
}

input CompanyUpdateManyMutationInput {
  name: String
  description: String
}

input CompanyUpdateManyWithoutPattern_idsInput {
  create: [CompanyCreateWithoutPattern_idsInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutPattern_idsInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutPattern_idsInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateWithoutPattern_idsDataInput {
  name: String
  description: String
}

input CompanyUpdateWithWhereUniqueWithoutPattern_idsInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutPattern_idsDataInput!
}

input CompanyUpsertWithWhereUniqueWithoutPattern_idsInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutPattern_idsDataInput!
  create: CompanyCreateWithoutPattern_idsInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  pattern_ids_every: PatternWhereInput
  pattern_ids_some: PatternWhereInput
  pattern_ids_none: PatternWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}

scalar DateTime

type Expense {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExpenseConnection {
  pageInfo: PageInfo!
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutExpense_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input ExpenseCreateManyWithoutTable_idsInput {
  create: [ExpenseCreateWithoutTable_idsInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type ExpenseEdge {
  node: Expense!
  cursor: String!
}

enum ExpenseOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExpensePreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ExpenseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ExpenseScalarWhereInput!]
  OR: [ExpenseScalarWhereInput!]
  NOT: [ExpenseScalarWhereInput!]
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
  AND: [ExpenseSubscriptionWhereInput!]
  OR: [ExpenseSubscriptionWhereInput!]
  NOT: [ExpenseSubscriptionWhereInput!]
}

input ExpenseUpdateInput {
  table_ids: TableUpdateManyWithoutExpense_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ExpenseUpdateManyDataInput {
  text: String
  note: String
}

input ExpenseUpdateManyMutationInput {
  text: String
  note: String
}

input ExpenseUpdateManyWithoutTable_idsInput {
  create: [ExpenseCreateWithoutTable_idsInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [ExpenseScalarWhereInput!]
  updateMany: [ExpenseUpdateManyWithWhereNestedInput!]
}

input ExpenseUpdateManyWithWhereNestedInput {
  where: ExpenseScalarWhereInput!
  data: ExpenseUpdateManyDataInput!
}

input ExpenseUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ExpenseUpdateWithWhereUniqueWithoutTable_idsInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutTable_idsDataInput!
}

input ExpenseUpsertWithWhereUniqueWithoutTable_idsInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutTable_idsDataInput!
  create: ExpenseCreateWithoutTable_idsInput!
}

input ExpenseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  NOT: [ExpenseWhereInput!]
}

input ExpenseWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createActor(data: ActorCreateInput!): Actor!
  updateActor(data: ActorUpdateInput!, where: ActorWhereUniqueInput!): Actor
  updateManyActors(data: ActorUpdateManyMutationInput!, where: ActorWhereInput): BatchPayload!
  upsertActor(where: ActorWhereUniqueInput!, create: ActorCreateInput!, update: ActorUpdateInput!): Actor!
  deleteActor(where: ActorWhereUniqueInput!): Actor
  deleteManyActors(where: ActorWhereInput): BatchPayload!
  createCanvas(data: CanvasCreateInput!): Canvas!
  updateCanvas(data: CanvasUpdateInput!, where: CanvasWhereUniqueInput!): Canvas
  updateManyCanvases(data: CanvasUpdateManyMutationInput!, where: CanvasWhereInput): BatchPayload!
  upsertCanvas(where: CanvasWhereUniqueInput!, create: CanvasCreateInput!, update: CanvasUpdateInput!): Canvas!
  deleteCanvas(where: CanvasWhereUniqueInput!): Canvas
  deleteManyCanvases(where: CanvasWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createExpense(data: ExpenseCreateInput!): Expense!
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
  updateManyExpenses(data: ExpenseUpdateManyMutationInput!, where: ExpenseWhereInput): BatchPayload!
  upsertExpense(where: ExpenseWhereUniqueInput!, create: ExpenseCreateInput!, update: ExpenseUpdateInput!): Expense!
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteManyExpenses(where: ExpenseWhereInput): BatchPayload!
  createNetworkEffect(data: NetworkEffectCreateInput!): NetworkEffect!
  updateNetworkEffect(data: NetworkEffectUpdateInput!, where: NetworkEffectWhereUniqueInput!): NetworkEffect
  updateManyNetworkEffects(data: NetworkEffectUpdateManyMutationInput!, where: NetworkEffectWhereInput): BatchPayload!
  upsertNetworkEffect(where: NetworkEffectWhereUniqueInput!, create: NetworkEffectCreateInput!, update: NetworkEffectUpdateInput!): NetworkEffect!
  deleteNetworkEffect(where: NetworkEffectWhereUniqueInput!): NetworkEffect
  deleteManyNetworkEffects(where: NetworkEffectWhereInput): BatchPayload!
  createPattern(data: PatternCreateInput!): Pattern!
  updatePattern(data: PatternUpdateInput!, where: PatternWhereUniqueInput!): Pattern
  updateManyPatterns(data: PatternUpdateManyMutationInput!, where: PatternWhereInput): BatchPayload!
  upsertPattern(where: PatternWhereUniqueInput!, create: PatternCreateInput!, update: PatternUpdateInput!): Pattern!
  deletePattern(where: PatternWhereUniqueInput!): Pattern
  deleteManyPatterns(where: PatternWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createRegulatory(data: RegulatoryCreateInput!): Regulatory!
  updateRegulatory(data: RegulatoryUpdateInput!, where: RegulatoryWhereUniqueInput!): Regulatory
  updateManyRegulatories(data: RegulatoryUpdateManyMutationInput!, where: RegulatoryWhereInput): BatchPayload!
  upsertRegulatory(where: RegulatoryWhereUniqueInput!, create: RegulatoryCreateInput!, update: RegulatoryUpdateInput!): Regulatory!
  deleteRegulatory(where: RegulatoryWhereUniqueInput!): Regulatory
  deleteManyRegulatories(where: RegulatoryWhereInput): BatchPayload!
  createRevenue(data: RevenueCreateInput!): Revenue!
  updateRevenue(data: RevenueUpdateInput!, where: RevenueWhereUniqueInput!): Revenue
  updateManyRevenues(data: RevenueUpdateManyMutationInput!, where: RevenueWhereInput): BatchPayload!
  upsertRevenue(where: RevenueWhereUniqueInput!, create: RevenueCreateInput!, update: RevenueUpdateInput!): Revenue!
  deleteRevenue(where: RevenueWhereUniqueInput!): Revenue
  deleteManyRevenues(where: RevenueWhereInput): BatchPayload!
  createStrategy(data: StrategyCreateInput!): Strategy!
  updateStrategy(data: StrategyUpdateInput!, where: StrategyWhereUniqueInput!): Strategy
  updateManyStrategies(data: StrategyUpdateManyMutationInput!, where: StrategyWhereInput): BatchPayload!
  upsertStrategy(where: StrategyWhereUniqueInput!, create: StrategyCreateInput!, update: StrategyUpdateInput!): Strategy!
  deleteStrategy(where: StrategyWhereUniqueInput!): Strategy
  deleteManyStrategies(where: StrategyWhereInput): BatchPayload!
  createStrategyPattern(data: StrategyPatternCreateInput!): StrategyPattern!
  updateStrategyPattern(data: StrategyPatternUpdateInput!, where: StrategyPatternWhereUniqueInput!): StrategyPattern
  updateManyStrategyPatterns(data: StrategyPatternUpdateManyMutationInput!, where: StrategyPatternWhereInput): BatchPayload!
  upsertStrategyPattern(where: StrategyPatternWhereUniqueInput!, create: StrategyPatternCreateInput!, update: StrategyPatternUpdateInput!): StrategyPattern!
  deleteStrategyPattern(where: StrategyPatternWhereUniqueInput!): StrategyPattern
  deleteManyStrategyPatterns(where: StrategyPatternWhereInput): BatchPayload!
  createTable(data: TableCreateInput!): Table!
  updateTable(data: TableUpdateInput!, where: TableWhereUniqueInput!): Table
  upsertTable(where: TableWhereUniqueInput!, create: TableCreateInput!, update: TableUpdateInput!): Table!
  deleteTable(where: TableWhereUniqueInput!): Table
  deleteManyTables(where: TableWhereInput): BatchPayload!
  createTechnicalInfrastracture(data: TechnicalInfrastractureCreateInput!): TechnicalInfrastracture!
  updateTechnicalInfrastracture(data: TechnicalInfrastractureUpdateInput!, where: TechnicalInfrastractureWhereUniqueInput!): TechnicalInfrastracture
  updateManyTechnicalInfrastractures(data: TechnicalInfrastractureUpdateManyMutationInput!, where: TechnicalInfrastractureWhereInput): BatchPayload!
  upsertTechnicalInfrastracture(where: TechnicalInfrastractureWhereUniqueInput!, create: TechnicalInfrastractureCreateInput!, update: TechnicalInfrastractureUpdateInput!): TechnicalInfrastracture!
  deleteTechnicalInfrastracture(where: TechnicalInfrastractureWhereUniqueInput!): TechnicalInfrastracture
  deleteManyTechnicalInfrastractures(where: TechnicalInfrastractureWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createValueCreation(data: ValueCreationCreateInput!): ValueCreation!
  updateValueCreation(data: ValueCreationUpdateInput!, where: ValueCreationWhereUniqueInput!): ValueCreation
  updateManyValueCreations(data: ValueCreationUpdateManyMutationInput!, where: ValueCreationWhereInput): BatchPayload!
  upsertValueCreation(where: ValueCreationWhereUniqueInput!, create: ValueCreationCreateInput!, update: ValueCreationUpdateInput!): ValueCreation!
  deleteValueCreation(where: ValueCreationWhereUniqueInput!): ValueCreation
  deleteManyValueCreations(where: ValueCreationWhereInput): BatchPayload!
  createValueDelivery(data: ValueDeliveryCreateInput!): ValueDelivery!
  updateValueDelivery(data: ValueDeliveryUpdateInput!, where: ValueDeliveryWhereUniqueInput!): ValueDelivery
  updateManyValueDeliveries(data: ValueDeliveryUpdateManyMutationInput!, where: ValueDeliveryWhereInput): BatchPayload!
  upsertValueDelivery(where: ValueDeliveryWhereUniqueInput!, create: ValueDeliveryCreateInput!, update: ValueDeliveryUpdateInput!): ValueDelivery!
  deleteValueDelivery(where: ValueDeliveryWhereUniqueInput!): ValueDelivery
  deleteManyValueDeliveries(where: ValueDeliveryWhereInput): BatchPayload!
  createValueProposition(data: ValuePropositionCreateInput!): ValueProposition!
  updateValueProposition(data: ValuePropositionUpdateInput!, where: ValuePropositionWhereUniqueInput!): ValueProposition
  updateManyValuePropositions(data: ValuePropositionUpdateManyMutationInput!, where: ValuePropositionWhereInput): BatchPayload!
  upsertValueProposition(where: ValuePropositionWhereUniqueInput!, create: ValuePropositionCreateInput!, update: ValuePropositionUpdateInput!): ValueProposition!
  deleteValueProposition(where: ValuePropositionWhereUniqueInput!): ValueProposition
  deleteManyValuePropositions(where: ValuePropositionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type NetworkEffect {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NetworkEffectConnection {
  pageInfo: PageInfo!
  edges: [NetworkEffectEdge]!
  aggregate: AggregateNetworkEffect!
}

input NetworkEffectCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutNetwork_effect_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input NetworkEffectCreateManyWithoutTable_idsInput {
  create: [NetworkEffectCreateWithoutTable_idsInput!]
  connect: [NetworkEffectWhereUniqueInput!]
}

input NetworkEffectCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type NetworkEffectEdge {
  node: NetworkEffect!
  cursor: String!
}

enum NetworkEffectOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NetworkEffectPreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NetworkEffectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NetworkEffectScalarWhereInput!]
  OR: [NetworkEffectScalarWhereInput!]
  NOT: [NetworkEffectScalarWhereInput!]
}

type NetworkEffectSubscriptionPayload {
  mutation: MutationType!
  node: NetworkEffect
  updatedFields: [String!]
  previousValues: NetworkEffectPreviousValues
}

input NetworkEffectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NetworkEffectWhereInput
  AND: [NetworkEffectSubscriptionWhereInput!]
  OR: [NetworkEffectSubscriptionWhereInput!]
  NOT: [NetworkEffectSubscriptionWhereInput!]
}

input NetworkEffectUpdateInput {
  table_ids: TableUpdateManyWithoutNetwork_effect_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input NetworkEffectUpdateManyDataInput {
  text: String
  note: String
}

input NetworkEffectUpdateManyMutationInput {
  text: String
  note: String
}

input NetworkEffectUpdateManyWithoutTable_idsInput {
  create: [NetworkEffectCreateWithoutTable_idsInput!]
  delete: [NetworkEffectWhereUniqueInput!]
  connect: [NetworkEffectWhereUniqueInput!]
  set: [NetworkEffectWhereUniqueInput!]
  disconnect: [NetworkEffectWhereUniqueInput!]
  update: [NetworkEffectUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [NetworkEffectUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [NetworkEffectScalarWhereInput!]
  updateMany: [NetworkEffectUpdateManyWithWhereNestedInput!]
}

input NetworkEffectUpdateManyWithWhereNestedInput {
  where: NetworkEffectScalarWhereInput!
  data: NetworkEffectUpdateManyDataInput!
}

input NetworkEffectUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input NetworkEffectUpdateWithWhereUniqueWithoutTable_idsInput {
  where: NetworkEffectWhereUniqueInput!
  data: NetworkEffectUpdateWithoutTable_idsDataInput!
}

input NetworkEffectUpsertWithWhereUniqueWithoutTable_idsInput {
  where: NetworkEffectWhereUniqueInput!
  update: NetworkEffectUpdateWithoutTable_idsDataInput!
  create: NetworkEffectCreateWithoutTable_idsInput!
}

input NetworkEffectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NetworkEffectWhereInput!]
  OR: [NetworkEffectWhereInput!]
  NOT: [NetworkEffectWhereInput!]
}

input NetworkEffectWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pattern {
  id: ID!
  canvas_ids(where: CanvasWhereInput, orderBy: CanvasOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Canvas!]
  table_id: Table!
  company_ids(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
  strategy_pattern_ids(where: StrategyPatternWhereInput, orderBy: StrategyPatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StrategyPattern!]
  name: String!
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PatternConnection {
  pageInfo: PageInfo!
  edges: [PatternEdge]!
  aggregate: AggregatePattern!
}

input PatternCreateInput {
  id: ID
  canvas_ids: CanvasCreateManyWithoutPattern_idsInput
  table_id: TableCreateOneInput!
  company_ids: CompanyCreateManyWithoutPattern_idsInput
  strategy_pattern_ids: StrategyPatternCreateManyWithoutPattern_idInput
  name: String!
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input PatternCreateManyWithoutCanvas_idsInput {
  create: [PatternCreateWithoutCanvas_idsInput!]
  connect: [PatternWhereUniqueInput!]
}

input PatternCreateManyWithoutCompany_idsInput {
  create: [PatternCreateWithoutCompany_idsInput!]
  connect: [PatternWhereUniqueInput!]
}

input PatternCreateOneWithoutStrategy_pattern_idsInput {
  create: PatternCreateWithoutStrategy_pattern_idsInput
  connect: PatternWhereUniqueInput
}

input PatternCreateWithoutCanvas_idsInput {
  id: ID
  table_id: TableCreateOneInput!
  company_ids: CompanyCreateManyWithoutPattern_idsInput
  strategy_pattern_ids: StrategyPatternCreateManyWithoutPattern_idInput
  name: String!
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input PatternCreateWithoutCompany_idsInput {
  id: ID
  canvas_ids: CanvasCreateManyWithoutPattern_idsInput
  table_id: TableCreateOneInput!
  strategy_pattern_ids: StrategyPatternCreateManyWithoutPattern_idInput
  name: String!
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input PatternCreateWithoutStrategy_pattern_idsInput {
  id: ID
  canvas_ids: CanvasCreateManyWithoutPattern_idsInput
  table_id: TableCreateOneInput!
  company_ids: CompanyCreateManyWithoutPattern_idsInput
  name: String!
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type PatternEdge {
  node: Pattern!
  cursor: String!
}

enum PatternOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  actorWeight_ASC
  actorWeight_DESC
  valuePropositionWeight_ASC
  valuePropositionWeight_DESC
  valueCreationWeight_ASC
  valueCreationWeight_DESC
  valueDeliveryWeight_ASC
  valueDeliveryWeight_DESC
  revenueWeight_ASC
  revenueWeight_DESC
  expenseWeight_ASC
  expenseWeight_DESC
  networkEffectWeight_ASC
  networkEffectWeight_DESC
  regulatoryWeight_ASC
  regulatoryWeight_DESC
  technicalInfrastractureWeight_ASC
  technicalInfrastractureWeight_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PatternPreviousValues {
  id: ID!
  name: String!
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PatternScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  actorWeight: Int
  actorWeight_not: Int
  actorWeight_in: [Int!]
  actorWeight_not_in: [Int!]
  actorWeight_lt: Int
  actorWeight_lte: Int
  actorWeight_gt: Int
  actorWeight_gte: Int
  valuePropositionWeight: Int
  valuePropositionWeight_not: Int
  valuePropositionWeight_in: [Int!]
  valuePropositionWeight_not_in: [Int!]
  valuePropositionWeight_lt: Int
  valuePropositionWeight_lte: Int
  valuePropositionWeight_gt: Int
  valuePropositionWeight_gte: Int
  valueCreationWeight: Int
  valueCreationWeight_not: Int
  valueCreationWeight_in: [Int!]
  valueCreationWeight_not_in: [Int!]
  valueCreationWeight_lt: Int
  valueCreationWeight_lte: Int
  valueCreationWeight_gt: Int
  valueCreationWeight_gte: Int
  valueDeliveryWeight: Int
  valueDeliveryWeight_not: Int
  valueDeliveryWeight_in: [Int!]
  valueDeliveryWeight_not_in: [Int!]
  valueDeliveryWeight_lt: Int
  valueDeliveryWeight_lte: Int
  valueDeliveryWeight_gt: Int
  valueDeliveryWeight_gte: Int
  revenueWeight: Int
  revenueWeight_not: Int
  revenueWeight_in: [Int!]
  revenueWeight_not_in: [Int!]
  revenueWeight_lt: Int
  revenueWeight_lte: Int
  revenueWeight_gt: Int
  revenueWeight_gte: Int
  expenseWeight: Int
  expenseWeight_not: Int
  expenseWeight_in: [Int!]
  expenseWeight_not_in: [Int!]
  expenseWeight_lt: Int
  expenseWeight_lte: Int
  expenseWeight_gt: Int
  expenseWeight_gte: Int
  networkEffectWeight: Int
  networkEffectWeight_not: Int
  networkEffectWeight_in: [Int!]
  networkEffectWeight_not_in: [Int!]
  networkEffectWeight_lt: Int
  networkEffectWeight_lte: Int
  networkEffectWeight_gt: Int
  networkEffectWeight_gte: Int
  regulatoryWeight: Int
  regulatoryWeight_not: Int
  regulatoryWeight_in: [Int!]
  regulatoryWeight_not_in: [Int!]
  regulatoryWeight_lt: Int
  regulatoryWeight_lte: Int
  regulatoryWeight_gt: Int
  regulatoryWeight_gte: Int
  technicalInfrastractureWeight: Int
  technicalInfrastractureWeight_not: Int
  technicalInfrastractureWeight_in: [Int!]
  technicalInfrastractureWeight_not_in: [Int!]
  technicalInfrastractureWeight_lt: Int
  technicalInfrastractureWeight_lte: Int
  technicalInfrastractureWeight_gt: Int
  technicalInfrastractureWeight_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PatternScalarWhereInput!]
  OR: [PatternScalarWhereInput!]
  NOT: [PatternScalarWhereInput!]
}

type PatternSubscriptionPayload {
  mutation: MutationType!
  node: Pattern
  updatedFields: [String!]
  previousValues: PatternPreviousValues
}

input PatternSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PatternWhereInput
  AND: [PatternSubscriptionWhereInput!]
  OR: [PatternSubscriptionWhereInput!]
  NOT: [PatternSubscriptionWhereInput!]
}

input PatternUpdateInput {
  canvas_ids: CanvasUpdateManyWithoutPattern_idsInput
  table_id: TableUpdateOneRequiredInput
  company_ids: CompanyUpdateManyWithoutPattern_idsInput
  strategy_pattern_ids: StrategyPatternUpdateManyWithoutPattern_idInput
  name: String
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input PatternUpdateManyDataInput {
  name: String
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
}

input PatternUpdateManyMutationInput {
  name: String
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
}

input PatternUpdateManyWithoutCanvas_idsInput {
  create: [PatternCreateWithoutCanvas_idsInput!]
  delete: [PatternWhereUniqueInput!]
  connect: [PatternWhereUniqueInput!]
  set: [PatternWhereUniqueInput!]
  disconnect: [PatternWhereUniqueInput!]
  update: [PatternUpdateWithWhereUniqueWithoutCanvas_idsInput!]
  upsert: [PatternUpsertWithWhereUniqueWithoutCanvas_idsInput!]
  deleteMany: [PatternScalarWhereInput!]
  updateMany: [PatternUpdateManyWithWhereNestedInput!]
}

input PatternUpdateManyWithoutCompany_idsInput {
  create: [PatternCreateWithoutCompany_idsInput!]
  delete: [PatternWhereUniqueInput!]
  connect: [PatternWhereUniqueInput!]
  set: [PatternWhereUniqueInput!]
  disconnect: [PatternWhereUniqueInput!]
  update: [PatternUpdateWithWhereUniqueWithoutCompany_idsInput!]
  upsert: [PatternUpsertWithWhereUniqueWithoutCompany_idsInput!]
  deleteMany: [PatternScalarWhereInput!]
  updateMany: [PatternUpdateManyWithWhereNestedInput!]
}

input PatternUpdateManyWithWhereNestedInput {
  where: PatternScalarWhereInput!
  data: PatternUpdateManyDataInput!
}

input PatternUpdateOneRequiredWithoutStrategy_pattern_idsInput {
  create: PatternCreateWithoutStrategy_pattern_idsInput
  update: PatternUpdateWithoutStrategy_pattern_idsDataInput
  upsert: PatternUpsertWithoutStrategy_pattern_idsInput
  connect: PatternWhereUniqueInput
}

input PatternUpdateWithoutCanvas_idsDataInput {
  table_id: TableUpdateOneRequiredInput
  company_ids: CompanyUpdateManyWithoutPattern_idsInput
  strategy_pattern_ids: StrategyPatternUpdateManyWithoutPattern_idInput
  name: String
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input PatternUpdateWithoutCompany_idsDataInput {
  canvas_ids: CanvasUpdateManyWithoutPattern_idsInput
  table_id: TableUpdateOneRequiredInput
  strategy_pattern_ids: StrategyPatternUpdateManyWithoutPattern_idInput
  name: String
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input PatternUpdateWithoutStrategy_pattern_idsDataInput {
  canvas_ids: CanvasUpdateManyWithoutPattern_idsInput
  table_id: TableUpdateOneRequiredInput
  company_ids: CompanyUpdateManyWithoutPattern_idsInput
  name: String
  description: String
  actorWeight: Int
  valuePropositionWeight: Int
  valueCreationWeight: Int
  valueDeliveryWeight: Int
  revenueWeight: Int
  expenseWeight: Int
  networkEffectWeight: Int
  regulatoryWeight: Int
  technicalInfrastractureWeight: Int
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input PatternUpdateWithWhereUniqueWithoutCanvas_idsInput {
  where: PatternWhereUniqueInput!
  data: PatternUpdateWithoutCanvas_idsDataInput!
}

input PatternUpdateWithWhereUniqueWithoutCompany_idsInput {
  where: PatternWhereUniqueInput!
  data: PatternUpdateWithoutCompany_idsDataInput!
}

input PatternUpsertWithoutStrategy_pattern_idsInput {
  update: PatternUpdateWithoutStrategy_pattern_idsDataInput!
  create: PatternCreateWithoutStrategy_pattern_idsInput!
}

input PatternUpsertWithWhereUniqueWithoutCanvas_idsInput {
  where: PatternWhereUniqueInput!
  update: PatternUpdateWithoutCanvas_idsDataInput!
  create: PatternCreateWithoutCanvas_idsInput!
}

input PatternUpsertWithWhereUniqueWithoutCompany_idsInput {
  where: PatternWhereUniqueInput!
  update: PatternUpdateWithoutCompany_idsDataInput!
  create: PatternCreateWithoutCompany_idsInput!
}

input PatternWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  canvas_ids_every: CanvasWhereInput
  canvas_ids_some: CanvasWhereInput
  canvas_ids_none: CanvasWhereInput
  table_id: TableWhereInput
  company_ids_every: CompanyWhereInput
  company_ids_some: CompanyWhereInput
  company_ids_none: CompanyWhereInput
  strategy_pattern_ids_every: StrategyPatternWhereInput
  strategy_pattern_ids_some: StrategyPatternWhereInput
  strategy_pattern_ids_none: StrategyPatternWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  actorWeight: Int
  actorWeight_not: Int
  actorWeight_in: [Int!]
  actorWeight_not_in: [Int!]
  actorWeight_lt: Int
  actorWeight_lte: Int
  actorWeight_gt: Int
  actorWeight_gte: Int
  valuePropositionWeight: Int
  valuePropositionWeight_not: Int
  valuePropositionWeight_in: [Int!]
  valuePropositionWeight_not_in: [Int!]
  valuePropositionWeight_lt: Int
  valuePropositionWeight_lte: Int
  valuePropositionWeight_gt: Int
  valuePropositionWeight_gte: Int
  valueCreationWeight: Int
  valueCreationWeight_not: Int
  valueCreationWeight_in: [Int!]
  valueCreationWeight_not_in: [Int!]
  valueCreationWeight_lt: Int
  valueCreationWeight_lte: Int
  valueCreationWeight_gt: Int
  valueCreationWeight_gte: Int
  valueDeliveryWeight: Int
  valueDeliveryWeight_not: Int
  valueDeliveryWeight_in: [Int!]
  valueDeliveryWeight_not_in: [Int!]
  valueDeliveryWeight_lt: Int
  valueDeliveryWeight_lte: Int
  valueDeliveryWeight_gt: Int
  valueDeliveryWeight_gte: Int
  revenueWeight: Int
  revenueWeight_not: Int
  revenueWeight_in: [Int!]
  revenueWeight_not_in: [Int!]
  revenueWeight_lt: Int
  revenueWeight_lte: Int
  revenueWeight_gt: Int
  revenueWeight_gte: Int
  expenseWeight: Int
  expenseWeight_not: Int
  expenseWeight_in: [Int!]
  expenseWeight_not_in: [Int!]
  expenseWeight_lt: Int
  expenseWeight_lte: Int
  expenseWeight_gt: Int
  expenseWeight_gte: Int
  networkEffectWeight: Int
  networkEffectWeight_not: Int
  networkEffectWeight_in: [Int!]
  networkEffectWeight_not_in: [Int!]
  networkEffectWeight_lt: Int
  networkEffectWeight_lte: Int
  networkEffectWeight_gt: Int
  networkEffectWeight_gte: Int
  regulatoryWeight: Int
  regulatoryWeight_not: Int
  regulatoryWeight_in: [Int!]
  regulatoryWeight_not_in: [Int!]
  regulatoryWeight_lt: Int
  regulatoryWeight_lte: Int
  regulatoryWeight_gt: Int
  regulatoryWeight_gte: Int
  technicalInfrastractureWeight: Int
  technicalInfrastractureWeight_not: Int
  technicalInfrastractureWeight_in: [Int!]
  technicalInfrastractureWeight_not_in: [Int!]
  technicalInfrastractureWeight_lt: Int
  technicalInfrastractureWeight_lte: Int
  technicalInfrastractureWeight_gt: Int
  technicalInfrastractureWeight_gte: Int
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PatternWhereInput!]
  OR: [PatternWhereInput!]
  NOT: [PatternWhereInput!]
}

input PatternWhereUniqueInput {
  id: ID
}

type Project {
  id: ID!
  user_id: User!
  canvas_ids(where: CanvasWhereInput, orderBy: CanvasOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Canvas!]
  name: String!
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  user_id: UserCreateOneWithoutProject_idsInput!
  canvas_ids: CanvasCreateManyWithoutProject_idInput
  name: String!
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input ProjectCreateManyWithoutUser_idInput {
  create: [ProjectCreateWithoutUser_idInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutCanvas_idsInput {
  create: ProjectCreateWithoutCanvas_idsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutCanvas_idsInput {
  id: ID
  user_id: UserCreateOneWithoutProject_idsInput!
  name: String!
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input ProjectCreateWithoutUser_idInput {
  id: ID
  canvas_ids: CanvasCreateManyWithoutProject_idInput
  name: String!
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  user_id: UserUpdateOneRequiredWithoutProject_idsInput
  canvas_ids: CanvasUpdateManyWithoutProject_idInput
  name: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ProjectUpdateManyDataInput {
  name: String
}

input ProjectUpdateManyMutationInput {
  name: String
}

input ProjectUpdateManyWithoutUser_idInput {
  create: [ProjectCreateWithoutUser_idInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutUser_idInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutUser_idInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateOneRequiredWithoutCanvas_idsInput {
  create: ProjectCreateWithoutCanvas_idsInput
  update: ProjectUpdateWithoutCanvas_idsDataInput
  upsert: ProjectUpsertWithoutCanvas_idsInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateWithoutCanvas_idsDataInput {
  user_id: UserUpdateOneRequiredWithoutProject_idsInput
  name: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ProjectUpdateWithoutUser_idDataInput {
  canvas_ids: CanvasUpdateManyWithoutProject_idInput
  name: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ProjectUpdateWithWhereUniqueWithoutUser_idInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutUser_idDataInput!
}

input ProjectUpsertWithoutCanvas_idsInput {
  update: ProjectUpdateWithoutCanvas_idsDataInput!
  create: ProjectCreateWithoutCanvas_idsInput!
}

input ProjectUpsertWithWhereUniqueWithoutUser_idInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutUser_idDataInput!
  create: ProjectCreateWithoutUser_idInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user_id: UserWhereInput
  canvas_ids_every: CanvasWhereInput
  canvas_ids_some: CanvasWhereInput
  canvas_ids_none: CanvasWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  actor(where: ActorWhereUniqueInput!): Actor
  actors(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Actor]!
  actorsConnection(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActorConnection!
  canvas(where: CanvasWhereUniqueInput!): Canvas
  canvases(where: CanvasWhereInput, orderBy: CanvasOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Canvas]!
  canvasesConnection(where: CanvasWhereInput, orderBy: CanvasOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CanvasConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  expense(where: ExpenseWhereUniqueInput!): Expense
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  networkEffect(where: NetworkEffectWhereUniqueInput!): NetworkEffect
  networkEffects(where: NetworkEffectWhereInput, orderBy: NetworkEffectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NetworkEffect]!
  networkEffectsConnection(where: NetworkEffectWhereInput, orderBy: NetworkEffectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NetworkEffectConnection!
  pattern(where: PatternWhereUniqueInput!): Pattern
  patterns(where: PatternWhereInput, orderBy: PatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pattern]!
  patternsConnection(where: PatternWhereInput, orderBy: PatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatternConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  regulatory(where: RegulatoryWhereUniqueInput!): Regulatory
  regulatories(where: RegulatoryWhereInput, orderBy: RegulatoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Regulatory]!
  regulatoriesConnection(where: RegulatoryWhereInput, orderBy: RegulatoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegulatoryConnection!
  revenue(where: RevenueWhereUniqueInput!): Revenue
  revenues(where: RevenueWhereInput, orderBy: RevenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Revenue]!
  revenuesConnection(where: RevenueWhereInput, orderBy: RevenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RevenueConnection!
  strategy(where: StrategyWhereUniqueInput!): Strategy
  strategies(where: StrategyWhereInput, orderBy: StrategyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Strategy]!
  strategiesConnection(where: StrategyWhereInput, orderBy: StrategyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StrategyConnection!
  strategyPattern(where: StrategyPatternWhereUniqueInput!): StrategyPattern
  strategyPatterns(where: StrategyPatternWhereInput, orderBy: StrategyPatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StrategyPattern]!
  strategyPatternsConnection(where: StrategyPatternWhereInput, orderBy: StrategyPatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StrategyPatternConnection!
  table(where: TableWhereUniqueInput!): Table
  tables(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table]!
  tablesConnection(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TableConnection!
  technicalInfrastracture(where: TechnicalInfrastractureWhereUniqueInput!): TechnicalInfrastracture
  technicalInfrastractures(where: TechnicalInfrastractureWhereInput, orderBy: TechnicalInfrastractureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TechnicalInfrastracture]!
  technicalInfrastracturesConnection(where: TechnicalInfrastractureWhereInput, orderBy: TechnicalInfrastractureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TechnicalInfrastractureConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  valueCreation(where: ValueCreationWhereUniqueInput!): ValueCreation
  valueCreations(where: ValueCreationWhereInput, orderBy: ValueCreationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ValueCreation]!
  valueCreationsConnection(where: ValueCreationWhereInput, orderBy: ValueCreationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ValueCreationConnection!
  valueDelivery(where: ValueDeliveryWhereUniqueInput!): ValueDelivery
  valueDeliveries(where: ValueDeliveryWhereInput, orderBy: ValueDeliveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ValueDelivery]!
  valueDeliveriesConnection(where: ValueDeliveryWhereInput, orderBy: ValueDeliveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ValueDeliveryConnection!
  valueProposition(where: ValuePropositionWhereUniqueInput!): ValueProposition
  valuePropositions(where: ValuePropositionWhereInput, orderBy: ValuePropositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ValueProposition]!
  valuePropositionsConnection(where: ValuePropositionWhereInput, orderBy: ValuePropositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ValuePropositionConnection!
  node(id: ID!): Node
}

type Regulatory {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RegulatoryConnection {
  pageInfo: PageInfo!
  edges: [RegulatoryEdge]!
  aggregate: AggregateRegulatory!
}

input RegulatoryCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutRegulatory_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input RegulatoryCreateManyWithoutTable_idsInput {
  create: [RegulatoryCreateWithoutTable_idsInput!]
  connect: [RegulatoryWhereUniqueInput!]
}

input RegulatoryCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type RegulatoryEdge {
  node: Regulatory!
  cursor: String!
}

enum RegulatoryOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RegulatoryPreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RegulatoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RegulatoryScalarWhereInput!]
  OR: [RegulatoryScalarWhereInput!]
  NOT: [RegulatoryScalarWhereInput!]
}

type RegulatorySubscriptionPayload {
  mutation: MutationType!
  node: Regulatory
  updatedFields: [String!]
  previousValues: RegulatoryPreviousValues
}

input RegulatorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RegulatoryWhereInput
  AND: [RegulatorySubscriptionWhereInput!]
  OR: [RegulatorySubscriptionWhereInput!]
  NOT: [RegulatorySubscriptionWhereInput!]
}

input RegulatoryUpdateInput {
  table_ids: TableUpdateManyWithoutRegulatory_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input RegulatoryUpdateManyDataInput {
  text: String
  note: String
}

input RegulatoryUpdateManyMutationInput {
  text: String
  note: String
}

input RegulatoryUpdateManyWithoutTable_idsInput {
  create: [RegulatoryCreateWithoutTable_idsInput!]
  delete: [RegulatoryWhereUniqueInput!]
  connect: [RegulatoryWhereUniqueInput!]
  set: [RegulatoryWhereUniqueInput!]
  disconnect: [RegulatoryWhereUniqueInput!]
  update: [RegulatoryUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [RegulatoryUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [RegulatoryScalarWhereInput!]
  updateMany: [RegulatoryUpdateManyWithWhereNestedInput!]
}

input RegulatoryUpdateManyWithWhereNestedInput {
  where: RegulatoryScalarWhereInput!
  data: RegulatoryUpdateManyDataInput!
}

input RegulatoryUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input RegulatoryUpdateWithWhereUniqueWithoutTable_idsInput {
  where: RegulatoryWhereUniqueInput!
  data: RegulatoryUpdateWithoutTable_idsDataInput!
}

input RegulatoryUpsertWithWhereUniqueWithoutTable_idsInput {
  where: RegulatoryWhereUniqueInput!
  update: RegulatoryUpdateWithoutTable_idsDataInput!
  create: RegulatoryCreateWithoutTable_idsInput!
}

input RegulatoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RegulatoryWhereInput!]
  OR: [RegulatoryWhereInput!]
  NOT: [RegulatoryWhereInput!]
}

input RegulatoryWhereUniqueInput {
  id: ID
}

type Revenue {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RevenueConnection {
  pageInfo: PageInfo!
  edges: [RevenueEdge]!
  aggregate: AggregateRevenue!
}

input RevenueCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutRevenue_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input RevenueCreateManyWithoutTable_idsInput {
  create: [RevenueCreateWithoutTable_idsInput!]
  connect: [RevenueWhereUniqueInput!]
}

input RevenueCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type RevenueEdge {
  node: Revenue!
  cursor: String!
}

enum RevenueOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RevenuePreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RevenueScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RevenueScalarWhereInput!]
  OR: [RevenueScalarWhereInput!]
  NOT: [RevenueScalarWhereInput!]
}

type RevenueSubscriptionPayload {
  mutation: MutationType!
  node: Revenue
  updatedFields: [String!]
  previousValues: RevenuePreviousValues
}

input RevenueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RevenueWhereInput
  AND: [RevenueSubscriptionWhereInput!]
  OR: [RevenueSubscriptionWhereInput!]
  NOT: [RevenueSubscriptionWhereInput!]
}

input RevenueUpdateInput {
  table_ids: TableUpdateManyWithoutRevenue_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input RevenueUpdateManyDataInput {
  text: String
  note: String
}

input RevenueUpdateManyMutationInput {
  text: String
  note: String
}

input RevenueUpdateManyWithoutTable_idsInput {
  create: [RevenueCreateWithoutTable_idsInput!]
  delete: [RevenueWhereUniqueInput!]
  connect: [RevenueWhereUniqueInput!]
  set: [RevenueWhereUniqueInput!]
  disconnect: [RevenueWhereUniqueInput!]
  update: [RevenueUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [RevenueUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [RevenueScalarWhereInput!]
  updateMany: [RevenueUpdateManyWithWhereNestedInput!]
}

input RevenueUpdateManyWithWhereNestedInput {
  where: RevenueScalarWhereInput!
  data: RevenueUpdateManyDataInput!
}

input RevenueUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input RevenueUpdateWithWhereUniqueWithoutTable_idsInput {
  where: RevenueWhereUniqueInput!
  data: RevenueUpdateWithoutTable_idsDataInput!
}

input RevenueUpsertWithWhereUniqueWithoutTable_idsInput {
  where: RevenueWhereUniqueInput!
  update: RevenueUpdateWithoutTable_idsDataInput!
  create: RevenueCreateWithoutTable_idsInput!
}

input RevenueWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RevenueWhereInput!]
  OR: [RevenueWhereInput!]
  NOT: [RevenueWhereInput!]
}

input RevenueWhereUniqueInput {
  id: ID
}

enum Role {
  USER
  ADMIN
}

type Strategy {
  id: ID!
  canvas_ids(where: CanvasWhereInput, orderBy: CanvasOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Canvas!]
  strategy_pattern_ids(where: StrategyPatternWhereInput, orderBy: StrategyPatternOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StrategyPattern!]
  name: String!
  description: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StrategyConnection {
  pageInfo: PageInfo!
  edges: [StrategyEdge]!
  aggregate: AggregateStrategy!
}

input StrategyCreateInput {
  id: ID
  canvas_ids: CanvasCreateManyWithoutStrategy_idInput
  strategy_pattern_ids: StrategyPatternCreateManyWithoutStrategy_idInput
  name: String!
  description: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input StrategyCreateOneWithoutCanvas_idsInput {
  create: StrategyCreateWithoutCanvas_idsInput
  connect: StrategyWhereUniqueInput
}

input StrategyCreateOneWithoutStrategy_pattern_idsInput {
  create: StrategyCreateWithoutStrategy_pattern_idsInput
  connect: StrategyWhereUniqueInput
}

input StrategyCreateWithoutCanvas_idsInput {
  id: ID
  strategy_pattern_ids: StrategyPatternCreateManyWithoutStrategy_idInput
  name: String!
  description: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input StrategyCreateWithoutStrategy_pattern_idsInput {
  id: ID
  canvas_ids: CanvasCreateManyWithoutStrategy_idInput
  name: String!
  description: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type StrategyEdge {
  node: Strategy!
  cursor: String!
}

enum StrategyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StrategyPattern {
  id: ID!
  strategy_id: Strategy!
  pattern_id: Pattern!
  weight: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StrategyPatternConnection {
  pageInfo: PageInfo!
  edges: [StrategyPatternEdge]!
  aggregate: AggregateStrategyPattern!
}

input StrategyPatternCreateInput {
  id: ID
  strategy_id: StrategyCreateOneWithoutStrategy_pattern_idsInput!
  pattern_id: PatternCreateOneWithoutStrategy_pattern_idsInput!
  weight: Int!
}

input StrategyPatternCreateManyWithoutPattern_idInput {
  create: [StrategyPatternCreateWithoutPattern_idInput!]
  connect: [StrategyPatternWhereUniqueInput!]
}

input StrategyPatternCreateManyWithoutStrategy_idInput {
  create: [StrategyPatternCreateWithoutStrategy_idInput!]
  connect: [StrategyPatternWhereUniqueInput!]
}

input StrategyPatternCreateWithoutPattern_idInput {
  id: ID
  strategy_id: StrategyCreateOneWithoutStrategy_pattern_idsInput!
  weight: Int!
}

input StrategyPatternCreateWithoutStrategy_idInput {
  id: ID
  pattern_id: PatternCreateOneWithoutStrategy_pattern_idsInput!
  weight: Int!
}

type StrategyPatternEdge {
  node: StrategyPattern!
  cursor: String!
}

enum StrategyPatternOrderByInput {
  id_ASC
  id_DESC
  weight_ASC
  weight_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StrategyPatternPreviousValues {
  id: ID!
  weight: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StrategyPatternScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StrategyPatternScalarWhereInput!]
  OR: [StrategyPatternScalarWhereInput!]
  NOT: [StrategyPatternScalarWhereInput!]
}

type StrategyPatternSubscriptionPayload {
  mutation: MutationType!
  node: StrategyPattern
  updatedFields: [String!]
  previousValues: StrategyPatternPreviousValues
}

input StrategyPatternSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StrategyPatternWhereInput
  AND: [StrategyPatternSubscriptionWhereInput!]
  OR: [StrategyPatternSubscriptionWhereInput!]
  NOT: [StrategyPatternSubscriptionWhereInput!]
}

input StrategyPatternUpdateInput {
  strategy_id: StrategyUpdateOneRequiredWithoutStrategy_pattern_idsInput
  pattern_id: PatternUpdateOneRequiredWithoutStrategy_pattern_idsInput
  weight: Int
}

input StrategyPatternUpdateManyDataInput {
  weight: Int
}

input StrategyPatternUpdateManyMutationInput {
  weight: Int
}

input StrategyPatternUpdateManyWithoutPattern_idInput {
  create: [StrategyPatternCreateWithoutPattern_idInput!]
  delete: [StrategyPatternWhereUniqueInput!]
  connect: [StrategyPatternWhereUniqueInput!]
  set: [StrategyPatternWhereUniqueInput!]
  disconnect: [StrategyPatternWhereUniqueInput!]
  update: [StrategyPatternUpdateWithWhereUniqueWithoutPattern_idInput!]
  upsert: [StrategyPatternUpsertWithWhereUniqueWithoutPattern_idInput!]
  deleteMany: [StrategyPatternScalarWhereInput!]
  updateMany: [StrategyPatternUpdateManyWithWhereNestedInput!]
}

input StrategyPatternUpdateManyWithoutStrategy_idInput {
  create: [StrategyPatternCreateWithoutStrategy_idInput!]
  delete: [StrategyPatternWhereUniqueInput!]
  connect: [StrategyPatternWhereUniqueInput!]
  set: [StrategyPatternWhereUniqueInput!]
  disconnect: [StrategyPatternWhereUniqueInput!]
  update: [StrategyPatternUpdateWithWhereUniqueWithoutStrategy_idInput!]
  upsert: [StrategyPatternUpsertWithWhereUniqueWithoutStrategy_idInput!]
  deleteMany: [StrategyPatternScalarWhereInput!]
  updateMany: [StrategyPatternUpdateManyWithWhereNestedInput!]
}

input StrategyPatternUpdateManyWithWhereNestedInput {
  where: StrategyPatternScalarWhereInput!
  data: StrategyPatternUpdateManyDataInput!
}

input StrategyPatternUpdateWithoutPattern_idDataInput {
  strategy_id: StrategyUpdateOneRequiredWithoutStrategy_pattern_idsInput
  weight: Int
}

input StrategyPatternUpdateWithoutStrategy_idDataInput {
  pattern_id: PatternUpdateOneRequiredWithoutStrategy_pattern_idsInput
  weight: Int
}

input StrategyPatternUpdateWithWhereUniqueWithoutPattern_idInput {
  where: StrategyPatternWhereUniqueInput!
  data: StrategyPatternUpdateWithoutPattern_idDataInput!
}

input StrategyPatternUpdateWithWhereUniqueWithoutStrategy_idInput {
  where: StrategyPatternWhereUniqueInput!
  data: StrategyPatternUpdateWithoutStrategy_idDataInput!
}

input StrategyPatternUpsertWithWhereUniqueWithoutPattern_idInput {
  where: StrategyPatternWhereUniqueInput!
  update: StrategyPatternUpdateWithoutPattern_idDataInput!
  create: StrategyPatternCreateWithoutPattern_idInput!
}

input StrategyPatternUpsertWithWhereUniqueWithoutStrategy_idInput {
  where: StrategyPatternWhereUniqueInput!
  update: StrategyPatternUpdateWithoutStrategy_idDataInput!
  create: StrategyPatternCreateWithoutStrategy_idInput!
}

input StrategyPatternWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  strategy_id: StrategyWhereInput
  pattern_id: PatternWhereInput
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StrategyPatternWhereInput!]
  OR: [StrategyPatternWhereInput!]
  NOT: [StrategyPatternWhereInput!]
}

input StrategyPatternWhereUniqueInput {
  id: ID
}

type StrategyPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StrategySubscriptionPayload {
  mutation: MutationType!
  node: Strategy
  updatedFields: [String!]
  previousValues: StrategyPreviousValues
}

input StrategySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StrategyWhereInput
  AND: [StrategySubscriptionWhereInput!]
  OR: [StrategySubscriptionWhereInput!]
  NOT: [StrategySubscriptionWhereInput!]
}

input StrategyUpdateInput {
  canvas_ids: CanvasUpdateManyWithoutStrategy_idInput
  strategy_pattern_ids: StrategyPatternUpdateManyWithoutStrategy_idInput
  name: String
  description: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input StrategyUpdateManyMutationInput {
  name: String
  description: String
}

input StrategyUpdateOneRequiredWithoutStrategy_pattern_idsInput {
  create: StrategyCreateWithoutStrategy_pattern_idsInput
  update: StrategyUpdateWithoutStrategy_pattern_idsDataInput
  upsert: StrategyUpsertWithoutStrategy_pattern_idsInput
  connect: StrategyWhereUniqueInput
}

input StrategyUpdateOneWithoutCanvas_idsInput {
  create: StrategyCreateWithoutCanvas_idsInput
  update: StrategyUpdateWithoutCanvas_idsDataInput
  upsert: StrategyUpsertWithoutCanvas_idsInput
  delete: Boolean
  disconnect: Boolean
  connect: StrategyWhereUniqueInput
}

input StrategyUpdateWithoutCanvas_idsDataInput {
  strategy_pattern_ids: StrategyPatternUpdateManyWithoutStrategy_idInput
  name: String
  description: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input StrategyUpdateWithoutStrategy_pattern_idsDataInput {
  canvas_ids: CanvasUpdateManyWithoutStrategy_idInput
  name: String
  description: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input StrategyUpsertWithoutCanvas_idsInput {
  update: StrategyUpdateWithoutCanvas_idsDataInput!
  create: StrategyCreateWithoutCanvas_idsInput!
}

input StrategyUpsertWithoutStrategy_pattern_idsInput {
  update: StrategyUpdateWithoutStrategy_pattern_idsDataInput!
  create: StrategyCreateWithoutStrategy_pattern_idsInput!
}

input StrategyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  canvas_ids_every: CanvasWhereInput
  canvas_ids_some: CanvasWhereInput
  canvas_ids_none: CanvasWhereInput
  strategy_pattern_ids_every: StrategyPatternWhereInput
  strategy_pattern_ids_some: StrategyPatternWhereInput
  strategy_pattern_ids_none: StrategyPatternWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StrategyWhereInput!]
  OR: [StrategyWhereInput!]
  NOT: [StrategyWhereInput!]
}

input StrategyWhereUniqueInput {
  id: ID
}

type Subscription {
  actor(where: ActorSubscriptionWhereInput): ActorSubscriptionPayload
  canvas(where: CanvasSubscriptionWhereInput): CanvasSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  networkEffect(where: NetworkEffectSubscriptionWhereInput): NetworkEffectSubscriptionPayload
  pattern(where: PatternSubscriptionWhereInput): PatternSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  regulatory(where: RegulatorySubscriptionWhereInput): RegulatorySubscriptionPayload
  revenue(where: RevenueSubscriptionWhereInput): RevenueSubscriptionPayload
  strategy(where: StrategySubscriptionWhereInput): StrategySubscriptionPayload
  strategyPattern(where: StrategyPatternSubscriptionWhereInput): StrategyPatternSubscriptionPayload
  table(where: TableSubscriptionWhereInput): TableSubscriptionPayload
  technicalInfrastracture(where: TechnicalInfrastractureSubscriptionWhereInput): TechnicalInfrastractureSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  valueCreation(where: ValueCreationSubscriptionWhereInput): ValueCreationSubscriptionPayload
  valueDelivery(where: ValueDeliverySubscriptionWhereInput): ValueDeliverySubscriptionPayload
  valueProposition(where: ValuePropositionSubscriptionWhereInput): ValuePropositionSubscriptionPayload
}

type Table {
  id: ID!
  actor_entry_ids(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Actor!]
  value_proposition_entry_ids(where: ValuePropositionWhereInput, orderBy: ValuePropositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ValueProposition!]
  value_creation_entry_ids(where: ValueCreationWhereInput, orderBy: ValueCreationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ValueCreation!]
  value_delivery_entry_ids(where: ValueDeliveryWhereInput, orderBy: ValueDeliveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ValueDelivery!]
  revenue_entry_ids(where: RevenueWhereInput, orderBy: RevenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Revenue!]
  expense_entry_ids(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  network_effect_entry_ids(where: NetworkEffectWhereInput, orderBy: NetworkEffectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NetworkEffect!]
  technical_infrastructure_entry_ids(where: TechnicalInfrastractureWhereInput, orderBy: TechnicalInfrastractureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TechnicalInfrastracture!]
  regulatory_entry_ids(where: RegulatoryWhereInput, orderBy: RegulatoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Regulatory!]
}

type TableConnection {
  pageInfo: PageInfo!
  edges: [TableEdge]!
  aggregate: AggregateTable!
}

input TableCreateInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

input TableCreateManyWithoutActor_entry_idsInput {
  create: [TableCreateWithoutActor_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateManyWithoutExpense_entry_idsInput {
  create: [TableCreateWithoutExpense_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateManyWithoutNetwork_effect_entry_idsInput {
  create: [TableCreateWithoutNetwork_effect_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateManyWithoutRegulatory_entry_idsInput {
  create: [TableCreateWithoutRegulatory_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateManyWithoutRevenue_entry_idsInput {
  create: [TableCreateWithoutRevenue_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateManyWithoutTechnical_infrastructure_entry_idsInput {
  create: [TableCreateWithoutTechnical_infrastructure_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateManyWithoutValue_creation_entry_idsInput {
  create: [TableCreateWithoutValue_creation_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateManyWithoutValue_delivery_entry_idsInput {
  create: [TableCreateWithoutValue_delivery_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateManyWithoutValue_proposition_entry_idsInput {
  create: [TableCreateWithoutValue_proposition_entry_idsInput!]
  connect: [TableWhereUniqueInput!]
}

input TableCreateOneInput {
  create: TableCreateInput
  connect: TableWhereUniqueInput
}

input TableCreateWithoutActor_entry_idsInput {
  id: ID
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

input TableCreateWithoutExpense_entry_idsInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

input TableCreateWithoutNetwork_effect_entry_idsInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

input TableCreateWithoutRegulatory_entry_idsInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
}

input TableCreateWithoutRevenue_entry_idsInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

input TableCreateWithoutTechnical_infrastructure_entry_idsInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

input TableCreateWithoutValue_creation_entry_idsInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

input TableCreateWithoutValue_delivery_entry_idsInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

input TableCreateWithoutValue_proposition_entry_idsInput {
  id: ID
  actor_entry_ids: ActorCreateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationCreateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryCreateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueCreateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseCreateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectCreateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureCreateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryCreateManyWithoutTable_idsInput
}

type TableEdge {
  node: Table!
  cursor: String!
}

enum TableOrderByInput {
  id_ASC
  id_DESC
}

type TablePreviousValues {
  id: ID!
}

input TableScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [TableScalarWhereInput!]
  OR: [TableScalarWhereInput!]
  NOT: [TableScalarWhereInput!]
}

type TableSubscriptionPayload {
  mutation: MutationType!
  node: Table
  updatedFields: [String!]
  previousValues: TablePreviousValues
}

input TableSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TableWhereInput
  AND: [TableSubscriptionWhereInput!]
  OR: [TableSubscriptionWhereInput!]
  NOT: [TableSubscriptionWhereInput!]
}

input TableUpdateDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateManyWithoutActor_entry_idsInput {
  create: [TableCreateWithoutActor_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutActor_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutActor_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateManyWithoutExpense_entry_idsInput {
  create: [TableCreateWithoutExpense_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutExpense_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutExpense_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateManyWithoutNetwork_effect_entry_idsInput {
  create: [TableCreateWithoutNetwork_effect_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutNetwork_effect_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutNetwork_effect_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateManyWithoutRegulatory_entry_idsInput {
  create: [TableCreateWithoutRegulatory_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutRegulatory_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutRegulatory_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateManyWithoutRevenue_entry_idsInput {
  create: [TableCreateWithoutRevenue_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutRevenue_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutRevenue_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateManyWithoutTechnical_infrastructure_entry_idsInput {
  create: [TableCreateWithoutTechnical_infrastructure_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutTechnical_infrastructure_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutTechnical_infrastructure_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateManyWithoutValue_creation_entry_idsInput {
  create: [TableCreateWithoutValue_creation_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutValue_creation_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutValue_creation_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateManyWithoutValue_delivery_entry_idsInput {
  create: [TableCreateWithoutValue_delivery_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutValue_delivery_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutValue_delivery_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateManyWithoutValue_proposition_entry_idsInput {
  create: [TableCreateWithoutValue_proposition_entry_idsInput!]
  delete: [TableWhereUniqueInput!]
  connect: [TableWhereUniqueInput!]
  set: [TableWhereUniqueInput!]
  disconnect: [TableWhereUniqueInput!]
  update: [TableUpdateWithWhereUniqueWithoutValue_proposition_entry_idsInput!]
  upsert: [TableUpsertWithWhereUniqueWithoutValue_proposition_entry_idsInput!]
  deleteMany: [TableScalarWhereInput!]
}

input TableUpdateOneRequiredInput {
  create: TableCreateInput
  update: TableUpdateDataInput
  upsert: TableUpsertNestedInput
  connect: TableWhereUniqueInput
}

input TableUpdateWithoutActor_entry_idsDataInput {
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateWithoutExpense_entry_idsDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateWithoutNetwork_effect_entry_idsDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateWithoutRegulatory_entry_idsDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
}

input TableUpdateWithoutRevenue_entry_idsDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateWithoutTechnical_infrastructure_entry_idsDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateWithoutValue_creation_entry_idsDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateWithoutValue_delivery_entry_idsDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_proposition_entry_ids: ValuePropositionUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateWithoutValue_proposition_entry_idsDataInput {
  actor_entry_ids: ActorUpdateManyWithoutTable_idsInput
  value_creation_entry_ids: ValueCreationUpdateManyWithoutTable_idsInput
  value_delivery_entry_ids: ValueDeliveryUpdateManyWithoutTable_idsInput
  revenue_entry_ids: RevenueUpdateManyWithoutTable_idsInput
  expense_entry_ids: ExpenseUpdateManyWithoutTable_idsInput
  network_effect_entry_ids: NetworkEffectUpdateManyWithoutTable_idsInput
  technical_infrastructure_entry_ids: TechnicalInfrastractureUpdateManyWithoutTable_idsInput
  regulatory_entry_ids: RegulatoryUpdateManyWithoutTable_idsInput
}

input TableUpdateWithWhereUniqueWithoutActor_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutActor_entry_idsDataInput!
}

input TableUpdateWithWhereUniqueWithoutExpense_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutExpense_entry_idsDataInput!
}

input TableUpdateWithWhereUniqueWithoutNetwork_effect_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutNetwork_effect_entry_idsDataInput!
}

input TableUpdateWithWhereUniqueWithoutRegulatory_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutRegulatory_entry_idsDataInput!
}

input TableUpdateWithWhereUniqueWithoutRevenue_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutRevenue_entry_idsDataInput!
}

input TableUpdateWithWhereUniqueWithoutTechnical_infrastructure_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutTechnical_infrastructure_entry_idsDataInput!
}

input TableUpdateWithWhereUniqueWithoutValue_creation_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutValue_creation_entry_idsDataInput!
}

input TableUpdateWithWhereUniqueWithoutValue_delivery_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutValue_delivery_entry_idsDataInput!
}

input TableUpdateWithWhereUniqueWithoutValue_proposition_entry_idsInput {
  where: TableWhereUniqueInput!
  data: TableUpdateWithoutValue_proposition_entry_idsDataInput!
}

input TableUpsertNestedInput {
  update: TableUpdateDataInput!
  create: TableCreateInput!
}

input TableUpsertWithWhereUniqueWithoutActor_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutActor_entry_idsDataInput!
  create: TableCreateWithoutActor_entry_idsInput!
}

input TableUpsertWithWhereUniqueWithoutExpense_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutExpense_entry_idsDataInput!
  create: TableCreateWithoutExpense_entry_idsInput!
}

input TableUpsertWithWhereUniqueWithoutNetwork_effect_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutNetwork_effect_entry_idsDataInput!
  create: TableCreateWithoutNetwork_effect_entry_idsInput!
}

input TableUpsertWithWhereUniqueWithoutRegulatory_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutRegulatory_entry_idsDataInput!
  create: TableCreateWithoutRegulatory_entry_idsInput!
}

input TableUpsertWithWhereUniqueWithoutRevenue_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutRevenue_entry_idsDataInput!
  create: TableCreateWithoutRevenue_entry_idsInput!
}

input TableUpsertWithWhereUniqueWithoutTechnical_infrastructure_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutTechnical_infrastructure_entry_idsDataInput!
  create: TableCreateWithoutTechnical_infrastructure_entry_idsInput!
}

input TableUpsertWithWhereUniqueWithoutValue_creation_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutValue_creation_entry_idsDataInput!
  create: TableCreateWithoutValue_creation_entry_idsInput!
}

input TableUpsertWithWhereUniqueWithoutValue_delivery_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutValue_delivery_entry_idsDataInput!
  create: TableCreateWithoutValue_delivery_entry_idsInput!
}

input TableUpsertWithWhereUniqueWithoutValue_proposition_entry_idsInput {
  where: TableWhereUniqueInput!
  update: TableUpdateWithoutValue_proposition_entry_idsDataInput!
  create: TableCreateWithoutValue_proposition_entry_idsInput!
}

input TableWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  actor_entry_ids_every: ActorWhereInput
  actor_entry_ids_some: ActorWhereInput
  actor_entry_ids_none: ActorWhereInput
  value_proposition_entry_ids_every: ValuePropositionWhereInput
  value_proposition_entry_ids_some: ValuePropositionWhereInput
  value_proposition_entry_ids_none: ValuePropositionWhereInput
  value_creation_entry_ids_every: ValueCreationWhereInput
  value_creation_entry_ids_some: ValueCreationWhereInput
  value_creation_entry_ids_none: ValueCreationWhereInput
  value_delivery_entry_ids_every: ValueDeliveryWhereInput
  value_delivery_entry_ids_some: ValueDeliveryWhereInput
  value_delivery_entry_ids_none: ValueDeliveryWhereInput
  revenue_entry_ids_every: RevenueWhereInput
  revenue_entry_ids_some: RevenueWhereInput
  revenue_entry_ids_none: RevenueWhereInput
  expense_entry_ids_every: ExpenseWhereInput
  expense_entry_ids_some: ExpenseWhereInput
  expense_entry_ids_none: ExpenseWhereInput
  network_effect_entry_ids_every: NetworkEffectWhereInput
  network_effect_entry_ids_some: NetworkEffectWhereInput
  network_effect_entry_ids_none: NetworkEffectWhereInput
  technical_infrastructure_entry_ids_every: TechnicalInfrastractureWhereInput
  technical_infrastructure_entry_ids_some: TechnicalInfrastractureWhereInput
  technical_infrastructure_entry_ids_none: TechnicalInfrastractureWhereInput
  regulatory_entry_ids_every: RegulatoryWhereInput
  regulatory_entry_ids_some: RegulatoryWhereInput
  regulatory_entry_ids_none: RegulatoryWhereInput
  AND: [TableWhereInput!]
  OR: [TableWhereInput!]
  NOT: [TableWhereInput!]
}

input TableWhereUniqueInput {
  id: ID
}

type TechnicalInfrastracture {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TechnicalInfrastractureConnection {
  pageInfo: PageInfo!
  edges: [TechnicalInfrastractureEdge]!
  aggregate: AggregateTechnicalInfrastracture!
}

input TechnicalInfrastractureCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutTechnical_infrastructure_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input TechnicalInfrastractureCreateManyWithoutTable_idsInput {
  create: [TechnicalInfrastractureCreateWithoutTable_idsInput!]
  connect: [TechnicalInfrastractureWhereUniqueInput!]
}

input TechnicalInfrastractureCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type TechnicalInfrastractureEdge {
  node: TechnicalInfrastracture!
  cursor: String!
}

enum TechnicalInfrastractureOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TechnicalInfrastracturePreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TechnicalInfrastractureScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TechnicalInfrastractureScalarWhereInput!]
  OR: [TechnicalInfrastractureScalarWhereInput!]
  NOT: [TechnicalInfrastractureScalarWhereInput!]
}

type TechnicalInfrastractureSubscriptionPayload {
  mutation: MutationType!
  node: TechnicalInfrastracture
  updatedFields: [String!]
  previousValues: TechnicalInfrastracturePreviousValues
}

input TechnicalInfrastractureSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TechnicalInfrastractureWhereInput
  AND: [TechnicalInfrastractureSubscriptionWhereInput!]
  OR: [TechnicalInfrastractureSubscriptionWhereInput!]
  NOT: [TechnicalInfrastractureSubscriptionWhereInput!]
}

input TechnicalInfrastractureUpdateInput {
  table_ids: TableUpdateManyWithoutTechnical_infrastructure_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input TechnicalInfrastractureUpdateManyDataInput {
  text: String
  note: String
}

input TechnicalInfrastractureUpdateManyMutationInput {
  text: String
  note: String
}

input TechnicalInfrastractureUpdateManyWithoutTable_idsInput {
  create: [TechnicalInfrastractureCreateWithoutTable_idsInput!]
  delete: [TechnicalInfrastractureWhereUniqueInput!]
  connect: [TechnicalInfrastractureWhereUniqueInput!]
  set: [TechnicalInfrastractureWhereUniqueInput!]
  disconnect: [TechnicalInfrastractureWhereUniqueInput!]
  update: [TechnicalInfrastractureUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [TechnicalInfrastractureUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [TechnicalInfrastractureScalarWhereInput!]
  updateMany: [TechnicalInfrastractureUpdateManyWithWhereNestedInput!]
}

input TechnicalInfrastractureUpdateManyWithWhereNestedInput {
  where: TechnicalInfrastractureScalarWhereInput!
  data: TechnicalInfrastractureUpdateManyDataInput!
}

input TechnicalInfrastractureUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input TechnicalInfrastractureUpdateWithWhereUniqueWithoutTable_idsInput {
  where: TechnicalInfrastractureWhereUniqueInput!
  data: TechnicalInfrastractureUpdateWithoutTable_idsDataInput!
}

input TechnicalInfrastractureUpsertWithWhereUniqueWithoutTable_idsInput {
  where: TechnicalInfrastractureWhereUniqueInput!
  update: TechnicalInfrastractureUpdateWithoutTable_idsDataInput!
  create: TechnicalInfrastractureCreateWithoutTable_idsInput!
}

input TechnicalInfrastractureWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TechnicalInfrastractureWhereInput!]
  OR: [TechnicalInfrastractureWhereInput!]
  NOT: [TechnicalInfrastractureWhereInput!]
}

input TechnicalInfrastractureWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  project_ids(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  firstName: String!
  lastName: String!
  email: String!
  role: Role!
  password: String!
  verificationCode: String
  verified: Boolean!
  phoneNumber: String
  updatedBy: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  project_ids: ProjectCreateManyWithoutUser_idInput
  firstName: String!
  lastName: String!
  email: String!
  role: Role
  password: String!
  verificationCode: String
  verified: Boolean
  phoneNumber: String
  updatedBy: UserCreateOneWithoutUpdatedByInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProject_idsInput {
  create: UserCreateWithoutProject_idsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUpdatedByInput {
  create: UserCreateWithoutUpdatedByInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProject_idsInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  role: Role
  password: String!
  verificationCode: String
  verified: Boolean
  phoneNumber: String
  updatedBy: UserCreateOneWithoutUpdatedByInput
}

input UserCreateWithoutUpdatedByInput {
  id: ID
  project_ids: ProjectCreateManyWithoutUser_idInput
  firstName: String!
  lastName: String!
  email: String!
  role: Role
  password: String!
  verificationCode: String
  verified: Boolean
  phoneNumber: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
  password_ASC
  password_DESC
  verificationCode_ASC
  verificationCode_DESC
  verified_ASC
  verified_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: Role!
  password: String!
  verificationCode: String
  verified: Boolean!
  phoneNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  project_ids: ProjectUpdateManyWithoutUser_idInput
  firstName: String
  lastName: String
  email: String
  role: Role
  password: String
  verificationCode: String
  verified: Boolean
  phoneNumber: String
  updatedBy: UserUpdateOneWithoutUpdatedByInput
}

input UserUpdateInput {
  project_ids: ProjectUpdateManyWithoutUser_idInput
  firstName: String
  lastName: String
  email: String
  role: Role
  password: String
  verificationCode: String
  verified: Boolean
  phoneNumber: String
  updatedBy: UserUpdateOneWithoutUpdatedByInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  role: Role
  password: String
  verificationCode: String
  verified: Boolean
  phoneNumber: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProject_idsInput {
  create: UserCreateWithoutProject_idsInput
  update: UserUpdateWithoutProject_idsDataInput
  upsert: UserUpsertWithoutProject_idsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUpdatedByInput {
  create: UserCreateWithoutUpdatedByInput
  update: UserUpdateWithoutUpdatedByDataInput
  upsert: UserUpsertWithoutUpdatedByInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutProject_idsDataInput {
  firstName: String
  lastName: String
  email: String
  role: Role
  password: String
  verificationCode: String
  verified: Boolean
  phoneNumber: String
  updatedBy: UserUpdateOneWithoutUpdatedByInput
}

input UserUpdateWithoutUpdatedByDataInput {
  project_ids: ProjectUpdateManyWithoutUser_idInput
  firstName: String
  lastName: String
  email: String
  role: Role
  password: String
  verificationCode: String
  verified: Boolean
  phoneNumber: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutProject_idsInput {
  update: UserUpdateWithoutProject_idsDataInput!
  create: UserCreateWithoutProject_idsInput!
}

input UserUpsertWithoutUpdatedByInput {
  update: UserUpdateWithoutUpdatedByDataInput!
  create: UserCreateWithoutUpdatedByInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  project_ids_every: ProjectWhereInput
  project_ids_some: ProjectWhereInput
  project_ids_none: ProjectWhereInput
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  verificationCode: String
  verificationCode_not: String
  verificationCode_in: [String!]
  verificationCode_not_in: [String!]
  verificationCode_lt: String
  verificationCode_lte: String
  verificationCode_gt: String
  verificationCode_gte: String
  verificationCode_contains: String
  verificationCode_not_contains: String
  verificationCode_starts_with: String
  verificationCode_not_starts_with: String
  verificationCode_ends_with: String
  verificationCode_not_ends_with: String
  verified: Boolean
  verified_not: Boolean
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type ValueCreation {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ValueCreationConnection {
  pageInfo: PageInfo!
  edges: [ValueCreationEdge]!
  aggregate: AggregateValueCreation!
}

input ValueCreationCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutValue_creation_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input ValueCreationCreateManyWithoutTable_idsInput {
  create: [ValueCreationCreateWithoutTable_idsInput!]
  connect: [ValueCreationWhereUniqueInput!]
}

input ValueCreationCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type ValueCreationEdge {
  node: ValueCreation!
  cursor: String!
}

enum ValueCreationOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ValueCreationPreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ValueCreationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ValueCreationScalarWhereInput!]
  OR: [ValueCreationScalarWhereInput!]
  NOT: [ValueCreationScalarWhereInput!]
}

type ValueCreationSubscriptionPayload {
  mutation: MutationType!
  node: ValueCreation
  updatedFields: [String!]
  previousValues: ValueCreationPreviousValues
}

input ValueCreationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ValueCreationWhereInput
  AND: [ValueCreationSubscriptionWhereInput!]
  OR: [ValueCreationSubscriptionWhereInput!]
  NOT: [ValueCreationSubscriptionWhereInput!]
}

input ValueCreationUpdateInput {
  table_ids: TableUpdateManyWithoutValue_creation_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ValueCreationUpdateManyDataInput {
  text: String
  note: String
}

input ValueCreationUpdateManyMutationInput {
  text: String
  note: String
}

input ValueCreationUpdateManyWithoutTable_idsInput {
  create: [ValueCreationCreateWithoutTable_idsInput!]
  delete: [ValueCreationWhereUniqueInput!]
  connect: [ValueCreationWhereUniqueInput!]
  set: [ValueCreationWhereUniqueInput!]
  disconnect: [ValueCreationWhereUniqueInput!]
  update: [ValueCreationUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [ValueCreationUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [ValueCreationScalarWhereInput!]
  updateMany: [ValueCreationUpdateManyWithWhereNestedInput!]
}

input ValueCreationUpdateManyWithWhereNestedInput {
  where: ValueCreationScalarWhereInput!
  data: ValueCreationUpdateManyDataInput!
}

input ValueCreationUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ValueCreationUpdateWithWhereUniqueWithoutTable_idsInput {
  where: ValueCreationWhereUniqueInput!
  data: ValueCreationUpdateWithoutTable_idsDataInput!
}

input ValueCreationUpsertWithWhereUniqueWithoutTable_idsInput {
  where: ValueCreationWhereUniqueInput!
  update: ValueCreationUpdateWithoutTable_idsDataInput!
  create: ValueCreationCreateWithoutTable_idsInput!
}

input ValueCreationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ValueCreationWhereInput!]
  OR: [ValueCreationWhereInput!]
  NOT: [ValueCreationWhereInput!]
}

input ValueCreationWhereUniqueInput {
  id: ID
}

type ValueDelivery {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ValueDeliveryConnection {
  pageInfo: PageInfo!
  edges: [ValueDeliveryEdge]!
  aggregate: AggregateValueDelivery!
}

input ValueDeliveryCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutValue_delivery_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input ValueDeliveryCreateManyWithoutTable_idsInput {
  create: [ValueDeliveryCreateWithoutTable_idsInput!]
  connect: [ValueDeliveryWhereUniqueInput!]
}

input ValueDeliveryCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type ValueDeliveryEdge {
  node: ValueDelivery!
  cursor: String!
}

enum ValueDeliveryOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ValueDeliveryPreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ValueDeliveryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ValueDeliveryScalarWhereInput!]
  OR: [ValueDeliveryScalarWhereInput!]
  NOT: [ValueDeliveryScalarWhereInput!]
}

type ValueDeliverySubscriptionPayload {
  mutation: MutationType!
  node: ValueDelivery
  updatedFields: [String!]
  previousValues: ValueDeliveryPreviousValues
}

input ValueDeliverySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ValueDeliveryWhereInput
  AND: [ValueDeliverySubscriptionWhereInput!]
  OR: [ValueDeliverySubscriptionWhereInput!]
  NOT: [ValueDeliverySubscriptionWhereInput!]
}

input ValueDeliveryUpdateInput {
  table_ids: TableUpdateManyWithoutValue_delivery_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ValueDeliveryUpdateManyDataInput {
  text: String
  note: String
}

input ValueDeliveryUpdateManyMutationInput {
  text: String
  note: String
}

input ValueDeliveryUpdateManyWithoutTable_idsInput {
  create: [ValueDeliveryCreateWithoutTable_idsInput!]
  delete: [ValueDeliveryWhereUniqueInput!]
  connect: [ValueDeliveryWhereUniqueInput!]
  set: [ValueDeliveryWhereUniqueInput!]
  disconnect: [ValueDeliveryWhereUniqueInput!]
  update: [ValueDeliveryUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [ValueDeliveryUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [ValueDeliveryScalarWhereInput!]
  updateMany: [ValueDeliveryUpdateManyWithWhereNestedInput!]
}

input ValueDeliveryUpdateManyWithWhereNestedInput {
  where: ValueDeliveryScalarWhereInput!
  data: ValueDeliveryUpdateManyDataInput!
}

input ValueDeliveryUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ValueDeliveryUpdateWithWhereUniqueWithoutTable_idsInput {
  where: ValueDeliveryWhereUniqueInput!
  data: ValueDeliveryUpdateWithoutTable_idsDataInput!
}

input ValueDeliveryUpsertWithWhereUniqueWithoutTable_idsInput {
  where: ValueDeliveryWhereUniqueInput!
  update: ValueDeliveryUpdateWithoutTable_idsDataInput!
  create: ValueDeliveryCreateWithoutTable_idsInput!
}

input ValueDeliveryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ValueDeliveryWhereInput!]
  OR: [ValueDeliveryWhereInput!]
  NOT: [ValueDeliveryWhereInput!]
}

input ValueDeliveryWhereUniqueInput {
  id: ID
}

type ValueProposition {
  id: ID!
  table_ids(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table!]
  text: String!
  note: String
  createdBy: User!
  updatedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ValuePropositionConnection {
  pageInfo: PageInfo!
  edges: [ValuePropositionEdge]!
  aggregate: AggregateValueProposition!
}

input ValuePropositionCreateInput {
  id: ID
  table_ids: TableCreateManyWithoutValue_proposition_entry_idsInput
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

input ValuePropositionCreateManyWithoutTable_idsInput {
  create: [ValuePropositionCreateWithoutTable_idsInput!]
  connect: [ValuePropositionWhereUniqueInput!]
}

input ValuePropositionCreateWithoutTable_idsInput {
  id: ID
  text: String!
  note: String
  createdBy: UserCreateOneInput!
  updatedBy: UserCreateOneInput!
}

type ValuePropositionEdge {
  node: ValueProposition!
  cursor: String!
}

enum ValuePropositionOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ValuePropositionPreviousValues {
  id: ID!
  text: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ValuePropositionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ValuePropositionScalarWhereInput!]
  OR: [ValuePropositionScalarWhereInput!]
  NOT: [ValuePropositionScalarWhereInput!]
}

type ValuePropositionSubscriptionPayload {
  mutation: MutationType!
  node: ValueProposition
  updatedFields: [String!]
  previousValues: ValuePropositionPreviousValues
}

input ValuePropositionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ValuePropositionWhereInput
  AND: [ValuePropositionSubscriptionWhereInput!]
  OR: [ValuePropositionSubscriptionWhereInput!]
  NOT: [ValuePropositionSubscriptionWhereInput!]
}

input ValuePropositionUpdateInput {
  table_ids: TableUpdateManyWithoutValue_proposition_entry_idsInput
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ValuePropositionUpdateManyDataInput {
  text: String
  note: String
}

input ValuePropositionUpdateManyMutationInput {
  text: String
  note: String
}

input ValuePropositionUpdateManyWithoutTable_idsInput {
  create: [ValuePropositionCreateWithoutTable_idsInput!]
  delete: [ValuePropositionWhereUniqueInput!]
  connect: [ValuePropositionWhereUniqueInput!]
  set: [ValuePropositionWhereUniqueInput!]
  disconnect: [ValuePropositionWhereUniqueInput!]
  update: [ValuePropositionUpdateWithWhereUniqueWithoutTable_idsInput!]
  upsert: [ValuePropositionUpsertWithWhereUniqueWithoutTable_idsInput!]
  deleteMany: [ValuePropositionScalarWhereInput!]
  updateMany: [ValuePropositionUpdateManyWithWhereNestedInput!]
}

input ValuePropositionUpdateManyWithWhereNestedInput {
  where: ValuePropositionScalarWhereInput!
  data: ValuePropositionUpdateManyDataInput!
}

input ValuePropositionUpdateWithoutTable_idsDataInput {
  text: String
  note: String
  createdBy: UserUpdateOneRequiredInput
  updatedBy: UserUpdateOneRequiredInput
}

input ValuePropositionUpdateWithWhereUniqueWithoutTable_idsInput {
  where: ValuePropositionWhereUniqueInput!
  data: ValuePropositionUpdateWithoutTable_idsDataInput!
}

input ValuePropositionUpsertWithWhereUniqueWithoutTable_idsInput {
  where: ValuePropositionWhereUniqueInput!
  update: ValuePropositionUpdateWithoutTable_idsDataInput!
  create: ValuePropositionCreateWithoutTable_idsInput!
}

input ValuePropositionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table_ids_every: TableWhereInput
  table_ids_some: TableWhereInput
  table_ids_none: TableWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ValuePropositionWhereInput!]
  OR: [ValuePropositionWhereInput!]
  NOT: [ValuePropositionWhereInput!]
}

input ValuePropositionWhereUniqueInput {
  id: ID
}
`